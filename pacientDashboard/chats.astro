---
/* SUbstituir aqui a api rest call */
const chatMessages = [
  {
    id: 1,
    sender: "Dr. Sarah Johnson",
    time: "2:30 PM",
    preview: "Your appointment is confirmed for tomorrow at 10 AM",
    messages: [
      {
        content:
          "Hello! I wanted to confirm your appointment for tomorrow at 10 AM for your cardiology consultation.",
        sent: false,
      },
      {
        content:
          "Yes, that works perfectly for me. Should I bring any specific documents?",
        sent: true,
      },
      {
        content:
          "Please bring your insurance card, a list of current medications, and any previous cardiac test results if you have them.",
        sent: false,
      },
      { content: "Perfect, I'll have everything ready. Thank you!", sent: true },
    ],
  },
  {
    id: 2,
    sender: "Metro Care Clinic",
    time: "1:45 PM",
    preview: "Thank you for your visit today. Here are your test results...",
    messages: [],
  },
  {
    id: 3,
    sender: "Dr. Michael Chen",
    time: "Yesterday",
    preview: "Please remember to apply the prescribed medication twice daily",
    messages: [],
  },
];
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MedFinder – Chat</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/lucide/0.263.1/umd/lucide.js"></script>
    <style>
      :root {
        --primary: #0B9A7A;
        --primary-dark: #097F66;
        --secondary: #F5F9F8;
        --text-dark: #16403C;
        --text-light: #6A8784;
        --accent: #E6F5F2;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);
        min-height: 100vh;
        color: var(--text-dark);
      }

      .container {
        display: flex;
        min-height: 100vh;
        max-width: 1400px;
        margin: 0 auto;
        background: white;
        box-shadow: 0 0 50px rgba(0,0,0,0.1);
      }

      /* ─── Sidebar (igual ao index.astro) ───────────────────────────────────────────────── */
      .sidebar {
        width: 280px;
        background: linear-gradient(180deg, var(--text-dark) 0%, var(--primary-dark) 100%);
        padding: 2rem 0;
        display: flex;
        flex-direction: column;
        position: relative;
      }
      .logo {
        padding: 0 2rem;
        margin-bottom: 3rem;
      }
      .logo h1 {
        color: white;
        font-size: 1.8rem;
        font-weight: 700;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      .logo .icon {
        width: 32px;
        height: 32px;
        background: linear-gradient(45deg, var(--primary), var(--accent));
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      .nav-menu {
        flex: 1;
        padding: 0 1rem;
      }
      .nav-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem 1.5rem;
        margin: 0.5rem 0;
        color: var(--text-light);
        cursor: pointer;
        border-radius: 12px;
        transition: all 0.3s ease;
        position: relative;
      }
      .nav-item:hover {
        background: rgba(255, 255, 255, 0.1);
        color: white;
        transform: translateX(5px);
      }
      .nav-item.active {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        box-shadow: 0 4px 15px rgba(11, 154, 122, 0.3);
      }
      .nav-item i {
        width: 20px;
        height: 20px;
      }
      .logout-section {
        padding: 0 1rem;
        border-top: 1px solid rgba(255, 255, 255, 0.1);
        padding-top: 1rem;
      }

      /* ─── Conteúdo Principal ───────────────────────────────────────────────────────── */
      .main-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: var(--secondary);
      }

      .header {
        background: white;
        padding: 1.5rem 2rem;
        border-bottom: 1px solid var(--accent);
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      }

      .search-bar {
        flex: 1;
        max-width: 500px;
        position: relative;
      }

      .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 3rem;
        border: 2px solid var(--accent);
        border-radius: 25px;
        font-size: 1rem;
        outline: none;
        transition: all 0.3s ease;
      }

      .search-input:focus {
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(11, 154, 122, 0.1);
      }

      .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-light);
      }

      .user-profile {
        display: flex;
        align-items: center;
        gap: 1rem;
      }

      .notification-btn {
        position: relative;
        padding: 0.5rem;
        border: none;
        background: none;
        cursor: pointer;
        border-radius: 50%;
        transition: background 0.3s ease;
      }

      .notification-btn:hover {
        background: var(--secondary);
      }

      .notification-badge {
        position: absolute;
        top: 0;
        right: 0;
        width: 8px;
        height: 8px;
        background: #e74c3c;
        border-radius: 50%;
      }

      .user-avatar {
        width: 40px;
        height: 40px;
        background: linear-gradient(45deg, var(--primary), var(--primary-dark));
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
      }

      /* ─── Chat Container ───────────────────────────────────────────────────────── */
      .chat-container {
        display: flex;
        height: 100%;
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        margin: 2rem;
      }

      .chat-sidebar {
        width: 300px;
        background: var(--secondary);
        border-right: 1px solid var(--accent);
      }

      .chat-header {
        padding: 1.5rem;
        border-bottom: 1px solid var(--accent);
        background: white;
      }

      .chat-list {
        overflow-y: auto;
        height: calc(100% - 80px);
      }

      .chat-item {
        padding: 1rem 1.5rem;
        border-bottom: 1px solid var(--accent);
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .chat-item:hover,
      .chat-item.active {
        background: white;
      }

      .chat-item-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
      }

      .chat-item-name {
        font-weight: 600;
        color: var(--text-dark);
      }

      .chat-item-time {
        font-size: 0.8rem;
        color: var(--text-light);
      }

      .chat-item-preview {
        color: var(--text-light);
        font-size: 0.9rem;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }

      .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      .chat-messages {
        flex: 1;
        padding: 1.5rem;
        overflow-y: auto;
        background: var(--secondary);
      }

      .message {
        margin-bottom: 1rem;
        display: flex;
        align-items: flex-start;
        gap: 0.5rem;
      }

      .message.sent {
        flex-direction: row-reverse;
      }

      .message-content {
        max-width: 70%;
        padding: 1rem;
        border-radius: 15px;
        background: white;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .message.sent .message-content {
        background: var(--primary);
        color: white;
      }

      .chat-input {
        padding: 1.5rem;
        background: white;
        border-top: 1px solid var(--accent);
        display: flex;
        gap: 1rem;
        align-items: center;
      }

      .chat-input input {
        flex: 1;
        padding: 0.75rem;
        border: 1px solid var(--accent);
        border-radius: 25px;
        outline: none;
      }

      .send-btn {
        padding: 0.75rem 1.5rem;
        background: var(--primary);
        color: white;
        border: none;
        border-radius: 25px;
        cursor: pointer;
        transition: background 0.3s ease;
      }

      .send-btn:hover {
        background: var(--primary-dark);
      }

      @media (max-width: 768px) {
        .container {
          flex-direction: column;
        }

        .sidebar {
          width: 100%;
          flex-direction: row;
          padding: 1rem;
          order: 2;
        }

        .nav-menu {
          display: flex;
          gap: 1rem;
          overflow-x: auto;
        }

        .nav-item {
          white-space: nowrap;
          min-width: fit-content;
        }
      }
    </style>
  </head>

  <body>
    <div class="container">
      <div class="sidebar">
        <div class="logo">
          <h1>
            <div class="icon">
              <i data-lucide="heart-pulse"></i>
            </div>
            MedFinder
          </h1>
        </div>

        <nav class="nav-menu">
          <div class="nav-item" onclick="location.href='/pacientDashboard'">
            <i data-lucide="home"></i>
            <span>Dashboard</span>
          </div>
          <div class="nav-item active" data-page="chat">
            <i data-lucide="message-circle"></i>
            <span>Chat</span>
          </div>
          <div class="nav-item" onclick="location.href='/appointments'">
            <i data-lucide="calendar"></i>
            <span>Agendamentos</span>
          </div>
          <div class="nav-item" onclick="location.href='/profile'">
            <i data-lucide="user"></i>
            <span>Perfil</span>
          </div>
        </nav>

        <div class="logout-section">
          <div class="nav-item" onclick="logout()">
            <i data-lucide="log-out"></i>
            <span>Logout</span>
          </div>
        </div>
      </div>

      <div class="main-content">
        <header class="header">
          <div class="search-bar">
            <i data-lucide="search" class="search-icon"></i>
            <input
              type="text"
              class="search-input"
              placeholder="Search..."
            />
          </div>

          <div class="user-profile">
            <button class="notification-btn">
              <i data-lucide="bell"></i>
              <div class="notification-badge"></div>
            </button>
            <!-- Poder vir do frontmatter ou de um fetch -->
            <div class="user-avatar">JD</div>
          </div>
        </header>

        <div class="chat-container">
          <div class="chat-sidebar">
            <div class="chat-header">
              <h3>Chats</h3>
            </div>
            <div class="chat-list">
              {chatMessages.map((chat, index) => (
                <div
                  class={`chat-item ${index === 0 ? "active" : ""}`}
                  data-id={chat.id}
                  key={chat.id}
                  onclick={`selectChat(${chat.id})`}
                >
                  <div class="chat-item-header">
                    <span class="chat-item-name">{chat.sender}</span>
                    <span class="chat-item-time">{chat.time}</span>
                  </div>
                  <div class="chat-item-preview">{chat.preview}</div>
                </div>
              ))}
            </div>
          </div>

          <div class="chat-main">
            <div class="chat-messages" id="chatMessages">
              {chatMessages[0].messages.map((message) => (
                <div class={`message ${message.sent ? "sent" : ""}`} key={message.content}>
                  <div class="message-content">
                    <p>{message.content}</p>
                  </div>
                </div>
              ))}
            </div>

            <div class="chat-input">
              <input
                type="text"
                placeholder="Digite sua mensagem..."
                id="messageInput"
              />
              <button class="send-btn" onclick="sendMessage()">
                Enviar
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      const chatMessages = JSON.parse(`<!--#--> ${JSON.stringify(chatMessages).replace(/</g, '\\u003c').replace(/>/g, '\\u003e')}`);

      document.addEventListener("DOMContentLoaded", () => {
        lucide.replace();

        // Seleciona e mostra as mensagens da conversa clicada
        window.selectChat = (id) => {
          const chatListItems = document.querySelectorAll(".chat-item");
          const chatMain = document.getElementById("chatMessages");
          const chat = chatMessages.find((c) => c.id === id);

          chatListItems.forEach((item) => {
            const cid = Number(item.getAttribute("data-id"));
            if (cid === id) item.classList.add("active");
            else item.classList.remove("active");
          });

          chatMain.innerHTML = "";
          chat.messages.forEach((m) => {
            const div = document.createElement("div");
            div.classList.add("message", m.sent ? "sent" : "");
            const contentDiv = document.createElement("div");
            contentDiv.classList.add("message-content");
            const p = document.createElement("p");
            p.textContent = m.content;
            contentDiv.appendChild(p);
            div.appendChild(contentDiv);
            chatMain.appendChild(div);
          });
          chatMain.scrollTop = chatMain.scrollHeight;
        };

        // Envia nova mensagem (simulado)
        window.sendMessage = () => {
          const input = document.getElementById("messageInput");
          const text = input.value.trim();
          if (!text) return;
          const chatMain = document.getElementById("chatMessages");
          const div = document.createElement("div");
          div.classList.add("message", "sent");
          const contentDiv = document.createElement("div");
          contentDiv.classList.add("message-content");
          const p = document.createElement("p");
          p.textContent = text;
          contentDiv.appendChild(p);
          div.appendChild(contentDiv);
          chatMain.appendChild(div);
          input.value = "";
          chatMain.scrollTop = chatMain.scrollHeight;
          // TODO: POST real a /api/sendMessage
        };

        // Logout (simulado)
        window.logout = () => {
          window.location.href = "/logout";
        };
      });
    </script>
  </body>
</html>
